#!/bin/bash

set -euo pipefail

interactive=false
dry_run=false
paged=false
log_commands=false

# Parse arguments
# This block processes command-line arguments, supporting long options (--interactive, --dry-run, --log-commands),
# combined short flags (e.g., -ni), and error handling for unknown options.
while [[ $# -gt 0 ]]; do
  arg="$1"
  case "$arg" in
    --interactive)
      interactive=true
      shift
      ;;
    --dry-run)
      dry_run=true
      shift
      ;;
    --paged)
      paged=true
      shift
      ;;
    --log-commands)
      log_commands=true
      shift
      ;;
    -[!-]*)
      # Handle combined short flags like -ni or -in
      combined="${arg:1}"
      for (( i=0; i<${#combined}; i++ )); do
        flag="${combined:$i:1}"
        case "$flag" in
          i)
            interactive=true
            ;;
          n)
            dry_run=true
            ;;
          p)
            paged=true
            ;;
          x)
            log_commands=true
            ;;
          *)
            echo "$0: Unknown short option: -$flag"
            exit 1
            ;;
        esac
      done
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "$0: Unknown option: $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

# Enable command logging if --log-commands or -x is active
if $log_commands; then
  set -x
fi

# Function: process_git_dirs
# Reads a list of Git repository directories from stdin and generates shell commands
# to execute the provided arguments in each directory.
# Adds color-coded prefixes to output for non-interactive mode.
process_git_dirs() {
  if $interactive; then
    printf "set -ex\n"
  fi

  local colors=(
    31  # Red
    32  # Green
    33  # Yellow
    34  # Blue
    35  # Magenta
    36  # Cyan
    91  # Bright Red
    92  # Bright Green
    93  # Bright Yellow
    94  # Bright Blue
    95  # Bright Magenta
    96  # Bright Cyan
  )

  local i=0
  while IFS= read -r line; do
    printf "sh -c 'cd %q &&" "$line"
    printf ' %q' "$@"
    if ! $interactive; then
      local color="${colors[i % ${#colors[@]}]}"
      printf ' 2>&1 | sed s#^#'
      printf "\e[%sm" "$color"
      printf '%q:' "$line"
      printf "\e[0m"
      printf '\ #'
      ((i++))
    fi
    printf "'\n"
  done
}

# Function: process_cmd
# Processes the commands generated by `process_git_dirs`: display, execute sequentially,
# or run in parallel.
process_cmd() {
  if $dry_run; then
    cat | less -FRX
  elif $interactive; then
    local cmds
    cmds=$(mktemp -u "${TMPDIR:-/tmp}/h-cmds-XXXXXX")
    trap 'rm -f "$cmds"' EXIT

    cat > "$cmds"
    sh "$cmds" < /dev/tty > /dev/tty 2>&1
  elif $paged; then
    parallel | less -FRX
  else
    parallel
  fi
}

# Main pipeline:
# 1. Find all Git repositories under the current directory using `gfind`.
# 2. Format the paths by removing "./" and ".git" suffix using `gsed`.
# 3. Sort the paths uniquely using `gsort`.
# 4. Pass the sorted paths to `process_git_dirs` to generate commands.
# 5. Pass the generated commands to `process_cmd` for execution or display.
# gfind . -mindepth 2 -follow -type d -name .git -prune 2>/dev/null |
fd -t d -HILg .git |
  gsed --unbuffered -r 's#^[.]/##;s#/[.]git/?$##' |
  gsort -u |
  process_git_dirs "$@" |
  process_cmd
