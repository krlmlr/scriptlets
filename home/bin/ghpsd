#!/bin/sh

set -e

CheckCleanWC() {
  if [ -n "$(git status --porcelain)" ]; then
    echo "Working copy must be clean. Exiting." 1>&2
    exit 1
  fi
}

CreateSubdir() {
  mkdir gh-pages
  touch gh-pages/.gitignore
  git add gh-pages
  git commit -m "add stub for GitHub pages"
}

InitCheckoutDir() {
  rm -rf .gh-pages
  touch .gitignore
  if ! egrep -q "^/\.gh-pages$" .gitignore; then sed -i -e '$a\' .gitignore; echo "/.gh-pages" >> .gitignore; fi
  git add .gitignore
  git commit -m "ignore .gh-pages"

  git clone --local --no-hardlinks . .gh-pages
  cd .gh-pages
  git checkout gh-pages --
}

if [ ! -d .git ]; then
  echo "Must be in root of Git repository." 1>&2
  exit 1
fi

ORIG_DIR="$PWD"

COMMAND=$1
shift

case $COMMAND in
  init)
    if [ "$1" = "-f" ]; then PUSH_FORCE=-f; fi

    CheckCleanWC
    CreateSubdir

    git branch $PUSH_FORCE gh-pages

    InitCheckoutDir

    find -mindepth 1 -maxdepth 1 -not "(" -name gh-pages -or -name .git ")" -exec git rm -r \{\} \+
    cd gh-pages
    find -mindepth 1 -maxdepth 1 -exec git mv \{\} .. \;
    cd ..
    rmdir gh-pages
    git commit -m "initial setup of gh-pages branch"
    git push
    ;;

  repair)
    git reset origin/master
    rm -rf .gh-pages/
    git checkout .
    git clean -f -d
    ;;

  merge)
    CheckCleanWC

    cd .gh-pages
    CheckCleanWC

    git checkout -q gh-pages --
    git fetch --all -q
    git pull -q
    git merge -s recursive -X subtree=gh-pages origin/master --no-edit
    git push origin gh-pages -q
    ;;

  checkout)
    CheckCleanWC
    InitCheckoutDir
    ;;

  "")
    echo "Must specify command" 1>&2
    exit 1
    ;;

  *)
    echo "Unknown command: $COMMAND" 1>&2
    exit 1
    ;;
esac

