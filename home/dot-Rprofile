local({
  if (file.exists("~/renv/activate.R")) {
    oldwd <- setwd("~")
    on.exit(setwd(oldwd))
    options(renv.config.synchronized.check = FALSE)
    source("renv/activate.R")
    if (grepl("unstable", R.version.string)) {
      if (getRversion() > "4.1.99") {
        warning("Fix HTTPUserAgent in .Rprofile", call. = FALSE)
      }
      options(
        HTTPUserAgent = "R/4.0.0 (ubuntu-20.04) R (4.0.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions"
      )
    }
    #  options(
    #    repos=c(CRAN = paste0("https://packagemanager.rstudio.com/all/__linux__/focal/1390593")),
    #    HTTPUserAgent = sprintf("R/%s R (%s)", getRversion(), paste(getRversion(), R.version$platform, R.version$arch, R.version$os))
    #  )
  } else if (file.exists("/opt/cran")) {
    options(repos = c(CRAN = "file:///opt/cran"))
  } else if (!("renv" %in% loadedNamespaces()) && Sys.which("lsb_release") != "") {
    release <- system2("lsb_release", "-sc", stdout = TRUE)
    if (release != "") {
      options(
        repos = c(CRAN = paste0("https://packagemanager.rstudio.com/all/__linux__/", release, "/latest")),
        HTTPUserAgent = sprintf("R/%s R (%s)", getRversion(), paste(getRversion(), R.version$platform, R.version$arch, R.version$os))
      )
    }
  }
})

if (requireNamespace("ulimit", quietly = TRUE)) invisible(ulimit::memory_limit(6000))

if (interactive()) {
  cat("Working directory:", getwd(), "\n")
  require(magrittr)

  if (Sys.getenv("RADIAN_VERSION") == "") {
    invisible(
      reg.finalizer(
        .GlobalEnv,
        eval(bquote(function(e) try(utils::savehistory(file.path(.(getwd()), ".Rhistory"))))),
        onexit = TRUE
      )
    )
  }
}

options(
  usethis.name = "Kirill MÃ¼ller",
  usethis.description = list(
    "Authors@R" = 'person("Kirill", "M\\u00fcller", role = c("aut", "cre"), email = "krlmlr+r@mailbox.org", comment = c(ORCID = "0000-0002-1416-3412"))',
    Encoding = "UTF-8",
    Version = "0.0.0.9000",
    Date = Sys.Date(),
    BugReports = paste0("https://github.com/krlmlr/", basename(getwd()), "/issues"),
    URL = paste0("https://github.com/krlmlr/", basename(getwd()), ", https://krlmlr.github.io/", basename(getwd())),
    License = "GPL-3",
    Roxygen = "list(markdown = TRUE)"
  ),
  usethis.install.args = "--install-tests",
  usethis.revdep.libpath = "~/R-revdep",

  warnPartialMatchAttr = TRUE,
  warnPartialMatchDollar = TRUE,
  warnPartialMatchArgs = TRUE,
  max.print = 100L,
  keep.source = TRUE,
  keep.source.pkgs = TRUE,

  # tibble.max_extra_cols = 30L,

  mc.cores = 8,

  reprex.style = TRUE,

  testthat.progress.verbose_skips = FALSE,

  pillar.bold = TRUE
)

# https://github.com/rstudio/rstudio/issues/4723#issuecomment-487759342
options(rstudio.errors.suppressed = FALSE)

(function() {
  check_local_env <- function(path) {
    found <- FALSE

    lib_path <- file.path(path, ".lib")
    if (file.exists(lib_path)) {
      .libPaths(c(normalizePath(lib_path), .libPaths()))
      options(prompt = paste0(basename(getwd()), "> "))
      message("Packages in local lib: ", paste(dir(lib_path), collapse = ", "))
      found <- TRUE
    }

    makevars_path <- file.path(path, "Makevars")
    if (file.exists(makevars_path)) {
      Sys.setenv(R_MAKEVARS_USER = normalizePath(makevars_path))
      message("Compiling with: \n", paste(readLines(makevars_path), collapse = "\n"))
      found <- TRUE
    }

    local_path <- file.path(path, ".Rprofile.local")
    if (file.exists(local_path)) {
      message("Sourcing ", local_path)
      source(local_path, chdir = TRUE, local = TRUE)
      found <- TRUE
    }

    invisible(found)
  }

  check_local_env("..")
  check_local_env(".")
})()

if (file.exists("~/.Rprofile.private")) {
  source("~/.Rprofile.private", chdir = TRUE)
}

options(buildtools.check = function(...) TRUE)

# options(error = expression({traceback(1); if (!interactive()) q(status = 1)}))
if (interactive()) {
  options(
    error = rlang::entrace,
    rlang_backtrace_on_error = "branch"
  )
}

# requireNamespace("tracer", quietly = TRUE)
# options(error = expression({tracer::tb(); if (!interactive()) q(status = 1)}))
options(deparse.max.lines = 2)

# Set to true to make these checks an error
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "warn")
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_" = "warn")

if (Sys.getenv("RSTUDIO") == "" && file.exists("/usr/lib/rstudio/bin/pandoc")) {
  Sys.setenv(RSTUDIO_PANDOC = "/usr/lib/rstudio/bin/pandoc")
}

if (requireNamespace("unix", quietly = TRUE)) {
  try(invisible(unix::rlimit_as(12e9, 12e9)))
}
